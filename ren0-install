#!/usr/bin/env bash

CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)

date=$(date +%Y%m%d-%H%M%S)

logo () { 
    local text="${1:?}"
    echo -en "
             :-+**             
         @%@###**#=            
        %%@@##+@@#+@           
       %###*=:.:-+*@@          
     ###%%#*+-.-#@%@%          
   #@%####%%%+--:--            
  .#@%%#+=====-.:::            
  @#%@%#++==--:::::            
 %@%%%%#*--:::::---            
 @%%%%@%#*+=-=--===            
  %%@@%@%#*+==+=--=            
   @@@@@%#+=**@%--=.           
     @@@%%+===+#*=-  %+        
        -%*+*-..-+=+*.         
         %*-       --=+        
         +#=                   
          *=-                                    
            ren01 Dotfiles\n\n" 
            printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}" 
}

if [ "$(id -u)" = 0 ]; then
    echo "This is script must be run as root"
    exit 1
fi

# -------- Start for the script ---------
logo "Welcome!"
sleep 3
clear 

logo "Installing needed packages..."


dependencias=(base-devel rustup pacman-contrib bspwm polybar sxhkd \
			  alacritty brightnessctl dunst rofi lsd stalonetray \
			  jq polkit-gnome git playerctl mpd xclip \
			  ncmpcpp ranger mpc picom xdo xdotool jgmenu \
			  feh ueberzug maim pamixer libwebp xdg-user-dirs \
			  webp-pixbuf-loader xorg-xprop xorg-xkill physlock papirus-icon-theme \
			  ttf-jetbrains-mono ttf-jetbrains-mono-nerd ttf-terminus-nerd ttf-inconsolata ttf-joypixels \
			  zsh zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting \
			  imagemagick xorg-xdpyinfo xorg-xsetroot xorg-xwininfo xorg-xrandr)

is_installed() {
    pacman -Qi "$1" &> /dev/null
    return $?
}

printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
for paquete in "${dependencias[@]}"; then
do
    if ! is_installed "$paquete"; then
        sudo pacman -S "$paquete" --noconfirm
        print "\n"
    else
        print "%s%s is already installed on your system!%s\n" "${CGR}" "$paquete" "${CNC}"
        sleep 1
    fi
done
sleep 3
clear


# --- Clone the rice ----
logo "Downloading dotefiles"

repo_url="https://github.com/0SU2/dotefiles.git"
repo_dir="$HOME/dotfiles"

# verificar si el directorio del repositorio ya existe y, si es asi, lo elimina
    if[ -d "$repo_dir" ]; then
        printf "Removing eixsting dotfiles repository\n"
        rm -rf "$repo_dir"
    fi

# CLona el repositorio
printf "Cloning dotfiles from %s\n" "$repo_url"
git clone --depth=1 "$repo_url" "$repo_dir"

sleep 2
clear

# --- Copy the rice ---
logo "Installing dotfiles..."
printf "Copying files to respective directories..\n"

[ ! -d ~/.config ] && mkdir ~/.config
[ ! -d ~/.local ] && mkdir ~/.local
[ ! -d ~/.local/bin ] && mkdir ~/.local/bin
[ ! -d ~/.local/share/applications ] && mkdir ~/.local/share/applications
[ ! -d ~/.local/share/fonts ] && mkdir ~/.local/share/fonts
[ ! -d ~/Pictures ] && mkdir ~/Pictures
[ ! -d ~/Pictures/Wallpapers ] && ~/Pictures/Wallpapers

for 

fc-cache -rv >/dev/null 2>&1
printf "%s%sFiles copied succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
sleep 3

# ----- Installing paru & others ------ #
logo "Installing Paru, Eww, tdrop & xqp"

# Installing Paru
    if command -v paru >/dev/null 2>&1; then
        printf "%s%sParu is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
    else
        printf "%s%sInstalling paru%s\n" "${BLD}" "${CGR}" "${CNC}"
        {
            cd "$HOME" || exit
            git clone https://aur.archlinux.org/paru-bin-git
            cd paru-bin || exit
            makepkg -si --noconfirm
        } || {
            printf "\n%s%sFailed to install Paru, You may need to install it manually%s\n" "${BLD}" "${CGR}" "${CNC}"
        }
    fi

# Installing xqpp
    if command -v xqp >/dev/null 2>&1; then
        printf "\n%s%sxqp is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
    else 
        printf "\n%s%sInstalling xqp, this should be fast!%s\n" "${BLD}" "${CGR}" "${CNC}"
        paru -S xqp --skipreview --noconfirm
    fi

# Installing eww
    if command -v eww >/dev/null 2>&1; then
        printf "\n%s%sEww is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
    else
        printf "\n%s%sInstalling Eww, this collud take 10 mins or more.%s\n" "${BLD}" "${CGR}" "${CNC}"
        {
             sudo pacman -S rustup --noconfirm
             cd "$HOME" || exit
             git clone https://github.com/elkowar/eww
             cd eww || exit
             cargo build --release --no-default-features --features x11
             sudo install -m 755 "$HOME/eww/target/release/eww" -t /usr/bin/
        } && {
            cd "$HOME" || exit
            rm -rf {paru-bin, .cargo, .rustup, eww} 
        } || {
            printf "%s%sFailed to install Eww. You may need to install manually%s\n" "${BLD}" "${CGR}" "${CNC}"
        }
    fi

## ---- Enabling MPD service ----- #
logo "Enabling mpd service"
# Verifica si el servicio mpd esta habilitado a nivel global (sistema)
    if systemclt is-enabled --quiet mpd.service; then
        printf "\n%s%sDisabling and stopping the global mpd services$s\n" "${BLD}" "${CGR}" "${CNC}"
        sudo systemctl stop mpd.service
        sudo systemctl disable mpd.service
    fi

printf "%s%sEnabling and starting the user-level mpd service%s\n" "${BLD}" "${CGR}" "${CNC}"
systemctl --user enable --now mpd.service

printf "%s%sDone!%s\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2

# ---- Changing default shell to zsh ----
logo "Changing default shell to zsh"
if [[ $SHELL != "/usr/bin/zsh" ]]; then
    printf "%s%sChanging your shell to zsh. Your root password is needed.%s\n\n" "${BLD}" "${CGR}" "${CNC}"
    # Cambia la shell a zsh
    chsh -s /usr/bin/zsh
    printf "%s%sShell changed to zsh. Please reboot.%s\n\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "%s%sYour shell is already zsh\nGood bye and good luck! installation finished, now reboot%s\n" "${BLD}" "${CGR}" "${CNC}"
fi
    
zsh


